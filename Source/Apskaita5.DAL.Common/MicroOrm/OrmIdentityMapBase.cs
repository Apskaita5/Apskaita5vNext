using System;

namespace Apskaita5.DAL.Common.MicroOrm
{
    /// <summary>
    /// abstract description of how a business object's (type) identity is persisted in a database table;
    /// concrete implementations should be added to a business type as a static field
    /// </summary>
    /// <typeparam name="T">a type of the business object that is described</typeparam>
    public abstract class OrmIdentityMapBase<T> where T : class
    {
        
        protected OrmIdentityMapBase(string tableName, string parentIdFieldName, string primaryKeyFieldName, 
            string primaryKeyPropName, bool primaryKeyAutoIncrement, string fetchQueryToken, 
            string fetchByParentIdQueryToken, string fetchAllQueryToken, string initQueryToken, 
            int? primaryKeyUpdateScope, bool scopeIsFlag, Func<T> createInstance)
        {

            if (tableName.IsNullOrWhiteSpace()) throw new ArgumentNullException(nameof(tableName));
            if (primaryKeyFieldName.IsNullOrWhiteSpace()) throw new ArgumentNullException(nameof(primaryKeyFieldName));
            if (primaryKeyPropName.IsNullOrWhiteSpace()) throw new ArgumentNullException(nameof(primaryKeyPropName));

            CreateInstance = createInstance ?? throw new ArgumentNullException(nameof(createInstance));
            TableName = tableName.Trim();
            PrimaryKeyFieldName = primaryKeyFieldName.Trim();
            PrimaryKeyPropName = primaryKeyPropName.Trim();
            PrimaryKeyAutoIncrement = primaryKeyAutoIncrement;
            FetchByParentIdQueryToken = fetchByParentIdQueryToken?.Trim() ?? string.Empty;
            FetchAllQueryToken = fetchAllQueryToken?.Trim() ?? string.Empty;
            ParentIdFieldName = parentIdFieldName?.Trim() ?? string.Empty;
            FetchQueryToken = fetchQueryToken?.Trim() ?? string.Empty;
            InitQueryToken = initQueryToken?.Trim() ?? string.Empty;
            ScopeIsFlag = scopeIsFlag;
            PrimaryKeyUpdateScope = primaryKeyUpdateScope;
            
        }


        /// <summary>
        /// Gets a name of the database table that the business object is persisted in.
        /// </summary>
        public string TableName { get; }

        /// <summary>
        /// Gets a name of the database table field that persists business object parent id value.
        /// Used only for select by parent id functionality.
        /// </summary>
        public string ParentIdFieldName { get; }

        /// <summary>
        /// Gets a primary key database field name.
        /// </summary>
        public string PrimaryKeyFieldName { get; }

        /// <summary>
        /// Gets a name of the the property that the primary key is managed by; match LightDataColumn name 
        /// that is returned on business object fetch.
        /// </summary>
        public string PrimaryKeyPropName { get; }

        /// <summary>
        /// Gets a value indicating whether a new primary key is autogenerated by the database.
        /// </summary>
        public bool PrimaryKeyAutoIncrement { get; }

        /// <summary>
        /// an update scope that updates the primary key property value in database
        /// Update scopes are application defined enums that convert nicely to int, e.g. Financial, Depreciation etc.
        /// If no scope is assigned the field value is updated for every scope.
        /// If multiple scope combinations are used, the enum should be defined as [Flags].
        /// in that case: (a) a field should only be assigned to a single scope;
        /// (b) a bitwise check is used: (fieldScope & requestedScope) != 0;
        /// (c) <see cref="ScopeIsFlag"/> should be set to true.
        /// </summary>
        public int? PrimaryKeyUpdateScope { get; }

        /// <summary>
        /// Creates a new instance of business object.
        /// </summary>
        public Func<T> CreateInstance { get; }


        /// <summary>
        /// Gets a fetch query token if a custom query should be used.
        /// </summary>
        public string FetchQueryToken { get; }

        /// <summary>
        /// Gets a fetch by parent id query token if a custom query should be used.
        /// </summary>
        public string FetchByParentIdQueryToken { get; }

        /// <summary>
        /// Gets a fetch all (table) query token if a custom query should be used.
        /// </summary>
        public string FetchAllQueryToken { get; }

        /// <summary>
        /// Gets an init query token to fetch initial values for a new business object (if init required).
        /// </summary>
        public string InitQueryToken { get; }
                     

        /// <summary>
        /// Gets a value indicating whether the scope is defined as a flag (enum).
        /// In that case a bitwise check is used: (fieldScope & requestedScope) != 0
        /// </summary>
        public bool ScopeIsFlag { get; }
                           
        /// <summary>
        /// whether the primary key can be changed manually.
        /// </summary>
        public abstract bool PrimaryKeyUpdatable { get; }

        #region Internal Mapping Methods        

        /// <summary>
        /// Gets an <see cref="SqlParam">SQL query parameter</see> for primary key value to be inserted into the database.
        /// Primary key field name shall be used as a parameter name.
        /// </summary>
        /// <param name="instance">an instance of business object to get a primary key parameter for</param>
        internal abstract SqlParam GetPrimaryKeyParamForInsert(T instance);

        /// <summary>
        /// Gets an <see cref="SqlParam">SQL query parameter</see> for updated primary key value in update statement set part.
        /// Primary key field name shall be used as a parameter name.
        /// </summary>
        /// <param name="instance">an instance of business object to get a primary key parameter for</param>
        internal abstract SqlParam GetPrimaryKeyParamForUpdateSet(T instance);

        /// <summary>
        /// Gets an <see cref="SqlParam">SQL query parameter</see> for (current) primary key reference is update statement.
        /// <paramref name="paramName"/> is used as a parameter name. Normaly it could be the same as field name.
        /// However, the field name is used in update statement set part, therefore, an alternative parameter name
        /// is required if the primary key value is updateable.
        /// </summary>
        /// <param name="instance">an instance of business object to get a primary key parameter for</param>
        internal abstract SqlParam GetPrimaryKeyParamForUpdateWhere(T instance, string paramName);

        /// <summary>
        /// Sets an instance primary key value from the query result.
        /// </summary>
        /// <param name="instance"></param>
        /// <param name="row"></param>
        internal abstract void LoadPrimaryKeyValue(T instance, LightDataRow row);

        /// <summary>
        /// Sets an instance primary key value from the query result.
        /// </summary>
        /// <param name="instance">an instance of business object to set the new primary key value for</param>
        /// <param name="nid">new autoincrement value assigned by the database on insert</param>
        internal abstract void SetPrimaryKeyAutoIncrementValue(T instance, Int64 nid);

        /// <summary>
        /// Updates current (original) primary key value after it has been updated in database,
        /// i.e. primary key (updated) value -> current primary key value. 
        /// (only applicable for non autoincrement primary key)
        /// </summary>
        /// <param name="instance">an instance of business object to update the primary key value for</param>
        internal abstract void UpdatePrimaryKey(T instance);

        /// <summary>
        /// Sets current (original) primary key value to null after it has been deleted from the database.
        /// </summary>
        /// <param name="instance">an instance of business object to clear the primary key value for</param>
        internal abstract void DeletePrimaryKey(T instance);

        /// <summary>
        /// Gets a primary key field name and an associated property name.
        /// Use it to format select query in id AS Id style.
        /// </summary>
        internal (string DbFieldName, string PropName) GetPrimaryKeySelectField()
        {
            return (DbFieldName: PrimaryKeyFieldName, PropName: PrimaryKeyPropName);
        }

        /// <summary>
        /// Gets a value indicating whether the primary key value shall be updated within the scopes given.
        /// </summary>
        /// <param name="scope">scopes that shall be updated; null scopes => update all updateable fields</param>
        internal bool PrimaryKeyIsInUpdateScope(int? scope)
        {
            if (PrimaryKeyAutoIncrement || !PrimaryKeyUpdatable) return false;
            return !scope.HasValue || null == PrimaryKeyUpdateScope || (ScopeIsFlag && 
                ((scope.Value & PrimaryKeyUpdateScope) != 0))
                || (!ScopeIsFlag && scope.Value == PrimaryKeyUpdateScope);
        }

        #endregion

    }
}
