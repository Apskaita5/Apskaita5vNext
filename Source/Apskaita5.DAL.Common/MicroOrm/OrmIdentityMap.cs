using System;

namespace Apskaita5.DAL.Common.MicroOrm
{
    /// <summary>
    /// describes how a business object's (type) identity is persisted in a database table;
    /// should be added to a business type as a static field
    /// </summary>
    /// <typeparam name="T">a type of the business object that is described</typeparam>
    public class OrmIdentityMap<T> where T : class
    {

        /// <summary>
        /// creates a description how a business object's identity is persisted in a database table;
        /// should be added to a business type as a static field
        /// </summary>
        /// <param name="tableName">a name of the database table that the business object is persisted in</param>
        /// <param name="primaryKeyFieldName">a primary key database field name</param>
        /// <param name="primaryKeyPropName">a name of the the property that the primary key is managed by; 
        /// match LightDataColumn name that is returned on business object fetch</param>
        /// <param name="primaryKeyAutoIncrement">a value indicating whether a new primary key is autogenerated by the database</param>
        /// <param name="primaryKeyGetter">a function to get a primary key value</param>
        /// <param name="primaryKeySetter">a method to set a primary key value</param>
        /// <param name="newPrimaryKeySetter">a method to set a new primary key value if it is autogenerated by the database</param>
        /// <param name="parentIdFieldName">a name of the database table field that persists business object parent id value;
        /// only used by select by parent id functionality.</param>
        /// <param name="fetchQueryToken">a fetch by primary key query token if custom query should be used</param>
        /// <param name="fetchByParentIdQueryToken">a fetch by parent id query token if a custom query should be used</param>
        /// <param name="fetchAllQueryToken">a fetch all (table) query token if a custom query should be used</param>
        /// <param name="initQueryToken">an init query token to fetch initial values for a new business object (if init required)</param>
        /// <param name="scopeIsFlag">a value indicating whether the scope is defined as a flag (enum).
        /// In that case a bitwise check is used: (fieldScope & requestedScope) != 0</param>
        public OrmIdentityMap(string tableName, string primaryKeyFieldName, string primaryKeyPropName, 
            bool primaryKeyAutoIncrement, Func<T, object> primaryKeyGetter, Action<T, LightDataRow> primaryKeySetter,
            Action<T, long> newPrimaryKeySetter = null, string parentIdFieldName = null, string fetchQueryToken = null, 
            string fetchByParentIdQueryToken = null, string fetchAllQueryToken = null, string initQueryToken = null,
            bool scopeIsFlag = false)
        {

            if (tableName.IsNullOrWhiteSpace()) throw new ArgumentNullException(nameof(tableName));
            if (primaryKeyFieldName.IsNullOrWhiteSpace()) throw new ArgumentNullException(nameof(primaryKeyFieldName));
            if (primaryKeyPropName.IsNullOrWhiteSpace()) throw new ArgumentNullException(nameof(primaryKeyPropName));
            if (null == newPrimaryKeySetter && primaryKeyAutoIncrement) throw new ArgumentNullException(nameof(newPrimaryKeySetter));

            TableName = tableName.Trim();            
            PrimaryKeyFieldName = primaryKeyFieldName.Trim();
            PrimaryKeyPropName = primaryKeyPropName.Trim();
            PrimaryKeyAutoIncrement = primaryKeyAutoIncrement;
            PrimaryKeyGetter = primaryKeyGetter ?? throw new ArgumentNullException(nameof(primaryKeyGetter));
            PrimaryKeySetter = primaryKeySetter ?? throw new ArgumentNullException(nameof(primaryKeySetter));
            NewPrimaryKeySetter = newPrimaryKeySetter;
            FetchByParentIdQueryToken = fetchByParentIdQueryToken?.Trim() ?? string.Empty;
            FetchAllQueryToken = fetchAllQueryToken?.Trim() ?? string.Empty;
            ParentIdFieldName = parentIdFieldName?.Trim() ?? string.Empty;
            FetchQueryToken = fetchQueryToken?.Trim() ?? string.Empty;
            InitQueryToken = initQueryToken?.Trim() ?? string.Empty;
            ScopeIsFlag = scopeIsFlag;

        }


        /// <summary>
        /// Gets a name of the database table that the business object is persisted in.
        /// </summary>
        public string TableName { get; }

        /// <summary>
        /// Gets a name of the database table field that persists business object parent id value.
        /// Used only for select by parent id functionality.
        /// </summary>
        public string ParentIdFieldName { get; }

        /// <summary>
        /// Gets a primary key database field name.
        /// </summary>
        public string PrimaryKeyFieldName { get; }

        /// <summary>
        /// Gets a name of the the property that the primary key is managed by; match LightDataColumn name 
        /// that is returned on business object fetch.
        /// </summary>
        public string PrimaryKeyPropName { get; }

        /// <summary>
        /// Gets a value indicating whether a new primary key is autogenerated by the database.
        /// </summary>
        public bool PrimaryKeyAutoIncrement { get; }

        /// <summary>
        /// Gets a function to get a primary key value.
        /// </summary>
        public Func<T, object> PrimaryKeyGetter { get; }

        /// <summary>
        /// Sets a primary key value.
        /// </summary>
        public Action<T, LightDataRow> PrimaryKeySetter { get; }

        /// <summary>
        /// Sets a new primary key value if the new value is returned by the database, i.e. autoincremented.
        /// </summary>
        public Action<T, long> NewPrimaryKeySetter { get; }

        /// <summary>
        /// Gets a fetch query token if a custom query should be used.
        /// </summary>
        public string FetchQueryToken { get; }

        /// <summary>
        /// Gets a fetch by parent id query token if a custom query should be used.
        /// </summary>
        public string FetchByParentIdQueryToken { get; }

        /// <summary>
        /// Gets a fetch all (table) query token if a custom query should be used.
        /// </summary>
        public string FetchAllQueryToken { get; }

        /// <summary>
        /// Gets an init query token to fetch initial values for a new business object (if init required).
        /// </summary>
        public string InitQueryToken { get; }

        /// <summary>
        /// Gets a value indicating whether the scope is defined as a flag (enum).
        /// In that case a bitwise check is used: (fieldScope & requestedScope) != 0
        /// </summary>
        public bool ScopeIsFlag { get; }

    }

}
